name: Build / Development

on:
  pull_request:
    branches:
      - main

jobs:
  build-dev:
    name: ${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # we only need to support linux
        os: [ ubuntu-22.04, ubuntu-latest ]
        # TODO: do we want to support musl?
        target: [ x86_64-unknown-linux-gnu ]
        # make sure it runs on latest stable & nightly rust in development build
        toolchain: [ stable, nightly ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy

      - name: Show Rust toolchain version
        shell: bash
        run: |
          cargo -V
          cargo clippy -V
          cargo fmt -- -V
          rustc -V

      # - name: Setup musl-tools
      #   if: matrix.target == 'x86_64-unknown-linux-musl'
      #   shell: bash
      #   run: sudo apt -y install musl-tools

      - name: Setup protobuf
        shell: bash
        run: sudo apt -y install protobuf-compiler

      - name: Add target
        uses: ./.github/actions/add-target
        with:
          target: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}

      - name: Generate version
        id: gen-version
        shell: bash
        run: echo 'VERSION=0.0.0-${{ github.sha }}' >> $GITHUB_OUTPUT

      - name: Replace version
        uses: ./.github/actions/replace-version
        with:
          version: ${{ steps.gen-version.outputs.VERSION }}

      - name: Run check
        uses: ./.github/actions/check

      #- name: Run test
      #  uses: ./.github/actions/test

      - name: Run build
        uses: ./.github/actions/build
        with:
          target: ${{ matrix.target }}
          release: false

#      - name: Generate artifacts name
#        id: gen-name
#        shell: bash
#        run: echo 'NAME=psh-dev-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}' >> $GITHUB_OUTPUT

      #- name: Generate binary extension
      #  id: gen-ext
      #  if: runner.os == 'Windows'
      #  shell: bash
      #  run: echo 'EXT=.exe' >> $GITHUB_OUTPUT

      #- name: Upload artifacts
      #        uses: actions/upload-artifact@v3
      #        with:
      # name: ${{ steps.gen-name.outputs.NAME }}
      #path: ./target/${{ matrix.target }}/debug/psh${{ steps.gen-ext.outputs.EXT }}
      #if-no-files-found: error
