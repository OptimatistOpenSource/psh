name: Build / Release

on:
  push:
    tags:
      - v*.*.*

jobs:
  build-release:
    name: ${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # we only need to support linux
        os: [ubuntu-20.04, ubuntu-latest]
        # TODO: do we want to support musl?
        target: [x86_64-unknown-linux-gnu]
        # make sure it runs on latest stable rust
        toolchain: [stable]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      - name: Setup Rust toolchain
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      # - name: Setup musl-tools
      #   if: matrix.target == 'x86_64-unknown-linux-musl'
      #   shell: bash
      #   run: sudo apt -y install musl-tools

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}

      - name: Generate version
        id: gen-version
        shell: bash
        run: echo 'VERSION=${{ github.ref_name }}' | sed 's/v//' >> $GITHUB_OUTPUT

      - name: Replace version
        uses: ./.github/actions/replace-version
        with:
          version: ${{ steps.gen-version.outputs.VERSION }}

      - name: Run build
        uses: ./.github/actions/build
        with:
          target: ${{ matrix.target }}
          release: true

      - name: Generate artifacts name
        id: gen-name
        shell: bash
        run: echo 'NAME=psh-${{ steps.gen-version.outputs.VERSION }}-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.toolchain }}' >> $GITHUB_OUTPUT

      - name: Generate binary extension
        id: gen-ext
        if: runner.os == 'Windows'
        shell: bash
        run: echo 'EXT=.exe' >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.gen-name.outputs.NAME }}
          path: ./target/${{ matrix.target }}/release/psh${{ steps.gen-ext.outputs.EXT }}
          if-no-files-found: error

      - name: Archive binary
        uses: ./.github/actions/make-archive
        with:
          files: ./target/${{ matrix.target }}/release/psh${{ steps.gen-ext.outputs.EXT }}
          out: ${{ steps.gen-name.outputs.NAME }}.zip

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.gen-name.outputs.NAME }}.zip
